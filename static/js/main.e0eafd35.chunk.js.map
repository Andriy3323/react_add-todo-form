{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","getUser","usersFromServer","find","App","useState","setTodos","setTitle","setUserId","isTitleEntered","setEnteredTitle","isUserSelected","setSelectedUser","useEffect","initialTodos","todosFromServer","action","method","onSubmit","event","preventDefault","newTitle","newUserId","newTodo","Math","max","currentTodos","addTodo","type","placeholder","value","onChange","target","selected","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0eafd35.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">\n      {todo.title}\n    </h2>\n\n    {todo.user && (\n      <UserInfo user={todo.user} />\n    )}\n  </article>\n);\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(\n    user => user.id === userId,\n  );\n\n  return foundUser || null;\n}\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [isTitleEntered, setEnteredTitle] = useState(false);\n  const [isUserSelected, setSelectedUser] = useState(false);\n\n  useEffect(() => {\n    const initialTodos = todosFromServer.map(todo => ({\n      ...todo,\n      user: getUser(todo.userId),\n    }));\n\n    setTodos(initialTodos);\n  }, []);\n\n  function addTodo(newTitle: string, newUserId: number): void {\n    const maxId = Math.max(...todos.map(todo => todo.id));\n\n    const newTodo: Todo = {\n      title: newTitle,\n      userId: newUserId,\n      completed: false,\n      id: maxId + 1,\n      user: getUser(userId),\n    };\n\n    setTodos(currentTodos => [...currentTodos, newTodo]);\n  }\n\n  function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n\n    setEnteredTitle(!title);\n    setSelectedUser(!userId);\n\n    if (!title || !userId) {\n      return;\n    }\n\n    addTodo(title, userId);\n    setTitle('');\n    setUserId(0);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter a title\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={event => {\n              setTitle(event.target.value);\n              setEnteredTitle(false);\n            }}\n          />\n          { isTitleEntered && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={event => {\n              setUserId(+event.target.value);\n              setSelectedUser(false);\n            }}\n          >\n            <option value=\"0\" selected disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {isUserSelected && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}